//================================================================================
// Peer Model Tool Chain
// Copyright (C) 2021 Eva Maria Kuehn
//--------------------------------------------------------------------------------
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//================================================================================
// SYSTEM:    Practical Peer Model Toolchain "for the poor woman/man"
// AUTHOR:    Eva Maria Kuehn
// CREATED:   January 2021 
//================================================================================

package codeGen.LaTeX;

import pmmm.*;
import qa.exceptions.SNHException;
import qa.exceptions.SyntaxException;
import qa.tracer.O;

//================================================================================
// automatically generate code
// - nb: most parts are fixed
// - in some parts my use case name needs to be inserted (all marked with "<<<<<<")
public class Pmmm2LaTeX {	
	//--------------------------------------------------------------------------------
	// for writing code to respective file
	LaTeXCodeWriter codeWriter;
	//--------------------------------------------------------------------------------
	PmmmType pmmmType;

	//================================================================================
	// CONSTRUCTORS
	//================================================================================
	//--------------------------------------------------------------------------------
	// goUseCaseDirFileName ... the directory name under "src" in go automaton, where the compiled use cases are generated in
	public Pmmm2LaTeX(LaTeXCodeWriter codeWriter, PmmmType pmmm) {
		this.codeWriter = codeWriter;
		this.pmmmType = pmmm;
	}

	//================================================================================
	// USE CASE FILE PARTS
	//================================================================================
	//--------------------------------------------------------------------------------
	public void generateUseCaseHeader() throws SNHException {
		//--------------------------------------------------------------------------------
		// switch file
		codeWriter.switch2File(LaTeXDefs.LATEX_FILE_ID);
		//--------------------------------------------------------------------------------
		// write xml header
		// - TBD: version number
		codeWriter.writelnInd("");
		//--------------------------------------------------------------------------------
		// write header that it is an auto gen file
		writeAutoFileHeader(LaTeXDefs.LATEX_FILE_ID);
	}

	//================================================================================
	// FILE HEADER & TAIL
	//================================================================================
	//--------------------------------------------------------------------------------
	// write header info that this code is autogenerated
	public void writeAutoFileHeader(int fileId) throws SNHException {
		codeWriter.writeln("%%********************************************************************************");
		codeWriter.writeln("%%********************************************************************************");
		codeWriter.writeln("%%*** AUTO GENERATED CODE START -- DO NOT CHANGE !!!");
		codeWriter.writeln("%%*** FILE NAME        = " + codeWriter.fileId2Info(fileId));
		codeWriter.writeln("%%*** AUTHOR           = Eva Maria Kuehn");
		codeWriter.writeln("%%*** DEVELOPMENT DATE = 2021");
		codeWriter.writeln("%%********************************************************************************");
		codeWriter.writeln("%%********************************************************************************");
		codeWriter.writeln("");
	}
	//--------------------------------------------------------------------------------
	// write header info that this code is autogenerated
	public void writeAutoFileTail() throws SNHException {
		//--------------------------------------------------------------------------------
		codeWriter.writeln("%%********************************************************************************");
		codeWriter.writeln("%% END OF AUTO GENERATED FILE ");
		codeWriter.writeln("%%********************************************************************************");
	}

	//================================================================================
	// USE CASE
	//================================================================================
	//--------------------------------------------------------------------------------
	// latex export of meta model:
	// TBD: CREATE, DELETE!!!!
	// TBD: PIC / POC abfrage ist nicht optimal/nicht ganz richtig
	// TBD: sub peer treatment / IOP treatment
	// TBD: caution: latex bug: poc guards must be *before* services -> so we output all services first
	public void writeTheUseCase() throws SyntaxException, SNHException {
		//--------------------------------------------------------------------------------
		/**/ O m = new O(){}; // debug
		//--------------------------------------------------------------------------------
		String testCaseName = pmmmType.getPmmmTypeName();
		//--------------------------------------------------------------------------------
		// local var
		String errMsg = "";
		//--------------------------------------------------------------------------------
		// switch file
		codeWriter.switch2File(LaTeXDefs.LATEX_FILE_ID);
		// for report:
		codeWriter.writelnInd("%%======================================================================= ");
		codeWriter.writelnInd("%%======================================================================= ");
		//--
		codeWriter.writeInd("\\section{");
		codeWriter.writeLaTeXCode(testCaseName);
		codeWriter.writeln("}\n");

		//================================================================================
		// PMMM PROPS
		//================================================================================
		//--------------------------------------------------------------------------------
		// TBD: 
		// String s = pmmm.getPmmmPropsDeclarations().toUserInfo();
		// ...
		//--------------------------------------------------------------------------------

		//================================================================================
		// ENTRY TYPES
		//================================================================================
		//--------------------------------------------------------------------------------
		// TBD: 
		// for(int i = 0; i < pmmm.getEntryTypes().getSize(); i++) {
		//   EntryType entryType = pmmm.getEntryTypes().get(i);
		//   ...
		// }
		//--------------------------------------------------------------------------------

		//================================================================================
		// PEER TYPES
		//================================================================================
		//--------------------------------------------------------------------------------
		for(int i = 0; i < pmmmType.getPeerTypes().size(); i++) {
			PeerType peerType = pmmmType.getPeerTypes().get(i);
			try {
				errMsg = "peer type " + peerType.getPeerTypeName();
				//--------------------------------------------------------------------------------
				// gen code for peer type
				new PeerType2LaTeX(codeWriter, peerType).generateCode();
				//--------------------------------------------------------------------------------
			} catch (SyntaxException e1) {
				try {
					this.codeWriter.closeFiles();
				} catch (SNHException e2) {
					errMsg = errMsg + "; also can't close files (SNH:836444)";
				}
				throw new SyntaxException(errMsg, m, e1);
			} catch (SNHException e1) {
				try {
					this.codeWriter.closeFiles();
				} catch (SNHException e2) {
					errMsg = errMsg + "; also can't close files";
				}
				throw new SNHException(834644, errMsg, m, e1);
			}
		}

		//--------------------------------------------------------------------------------
		// TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD TBD: 
		//--------------------------------------------------------------------------------
		
		//================================================================================
		// CONFIGS:
		//================================================================================
		//--------------------------------------------------------------------------------
		// TBD:
		// //--------------------------------------------------------------------------------
		// for(int i = 0; i <  pmmm.getConfigs().size(); i++) {
		//	 Config config = pmmm.getConfigs().get(i);
		//	 ...
		//   //--------------------------------------------------------------------------------
		//   //pmmm props:
		//	 s = config.getPmmmPropsDefinitions().toUserInfo();
		//	 if(! Util.isEmpty(s)) {
		//     ...
		//	 }
		//   //--------------------------------------------------------------------------------
		//   // peers
		//   for(int j = 0; j < config.getPeers().size(); j++) {
		//		//--------------------------------------------------------------------------------
		//		// nb: peer is stored statically in my class -- as context info!
		//		BasicCodeGenerator.peer = config.getPeers().get(j);
		//		//--------------------------------------------------------------------------------
		//		// pprops
		//		s = peer.getPPropsDefinitions().toUserInfo();
		//		if(! Util.isEmpty(s)) {
		//			...
		//		}
		//   }
		// }

	}

} // END OF CLASS


//================================================================================
// EOF
//================================================================================
